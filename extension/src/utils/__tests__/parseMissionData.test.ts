import { parseMissionData, MissionData } from '../parseMissionData';
import { describe, expect, it, vi } from 'vitest';

// Mock the logger to avoid console output during tests
vi.mock('../logger', () => ({
	redditLogger: {
		log: vi.fn(),
		error: vi.fn(),
	},
}));

describe('parseMissionData', () => {
	// Real response data from the API call
	const realResponseData = ``;

	// Convert base64 string to ArrayBuffer for testing
	function base64ToArrayBuffer(base64: string): ArrayBuffer {
		const binaryString = atob(base64);
		const bytes = new Uint8Array(binaryString.length);
		for (let i = 0; i < binaryString.length; i++) {
			bytes[i] = binaryString.charCodeAt(i);
		}
		return bytes.buffer;
	}

	describe('with real API response data', () => {
		it('should parse mission data correctly', () => {
			const arrayBuffer = base64ToArrayBuffer(realResponseData);
			const postId = 't3_1od3es7';

			const result = parseMissionData(arrayBuffer, postId);

			expect(result).not.toBeNull();
			expect(result).toEqual({
				postId: 't3_1od3es7',
				difficulty: 3,
				minLevel: 1,
				maxLevel: 5,
				environment: 'fields',
				foodName: 'Mole Sauce Savory Crepe',
				authorName: 'Sea_Spirit6677',
				title: 'In Search of Mole Sauce Savory Crepe',
			});
		});

		it('should handle missing fields gracefully', () => {
			// Test with empty buffer
			const emptyBuffer = new ArrayBuffer(0);
			const result = parseMissionData(emptyBuffer, 'test');

			expect(result).toEqual({
				postId: 'test',
				difficulty: undefined,
				minLevel: undefined,
				maxLevel: undefined,
				environment: undefined,
				foodName: undefined,
				authorName: undefined,
				title: undefined,
			});
		});

		it('should validate difficulty range', () => {
			// This test ensures the difficulty validation (1-5) is working
			const arrayBuffer = base64ToArrayBuffer(realResponseData);
			const result = parseMissionData(arrayBuffer, 't3_1od3es7');

			expect(result?.difficulty).toBeGreaterThanOrEqual(1);
			expect(result?.difficulty).toBeLessThanOrEqual(5);
		});
	});

	describe('edge cases', () => {
		it('should handle malformed data gracefully', () => {
			const malformedBuffer = new ArrayBuffer(10);
			const result = parseMissionData(malformedBuffer, 'test');

			expect(result).not.toBeNull();
			expect(result?.postId).toBe('test');
		});

		it('should handle null/undefined input', () => {
			expect(() => parseMissionData(null as any, 'test')).not.toThrow();
			expect(() => parseMissionData(undefined as any, 'test')).not.toThrow();
		});
	});

	describe('field extraction', () => {
		it('should extract difficulty with multiple offset attempts', () => {
			const arrayBuffer = base64ToArrayBuffer(realResponseData);
			const result = parseMissionData(arrayBuffer, 't3_1od3es7');

			expect(result?.difficulty).toBe(3);
		});

		it('should extract level ranges correctly', () => {
			const arrayBuffer = base64ToArrayBuffer(realResponseData);
			const result = parseMissionData(arrayBuffer, 't3_1od3es7');

			expect(result?.minLevel).toBe(1);
			expect(result?.maxLevel).toBe(5);
		});

		it('should extract text fields correctly', () => {
			const arrayBuffer = base64ToArrayBuffer(realResponseData);
			const result = parseMissionData(arrayBuffer, 't3_1od3es7');

			expect(result?.environment).toBe('fields');
			expect(result?.foodName).toBe('Mole Sauce Savory Crepe');
			expect(result?.authorName).toBe('Sea_Spirit6677');
			expect(result?.title).toBe('In Search of Mole Sauce Savory Crepe');
		});
	});
});
