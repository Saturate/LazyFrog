/**
 * Example PostRenderContent responses for testing parseMissionData
 *
 * Add your own examples here by copying the structure below.
 * Each example should have:
 * - name: A descriptive name for the example
 * - arrayBuffer: The raw ArrayBuffer data from PostRenderContent
 * - expectedResult: What the parser should extract from this data
 */

export interface ExampleResponse {
	name: string;
	arrayBuffer: ArrayBuffer;
	expectedResult: {
		missionData?: any;
		isInnPost?: boolean;
		error?: string;
	};
}

export const exampleResponses: ExampleResponse[] = [
	// Example 1: Regular mission post
	{
		name: 'Regular Mission Post',
		arrayBuffer: createArrayBufferFromBase64(
			'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',
		), // Replace with actual data
		expectedResult: {
			missionData: {
				id: '1oj9gty',
				range: '41-60',
				stars: 5,
				// Other mission properties
			},
			isInnPost: false,
		},
	},

	// Example 2: Inn post (completed mission)
	{
		name: 'Inn Post (Completed Mission)',
		arrayBuffer: createArrayBufferFromBase64(
			'',
		),
		expectedResult: {
			missionData: {
				// This should contain the parsed mission data
				mission: {
					environment: 'haunted_forest',
					encounters: [
						// Array of encounter objects
					],
					// Other mission properties
				},
			},
			isInnPost: true, // This should be true for inn posts
		},
	},

	// Example 3: Invalid/corrupted data
	{
		name: 'Invalid Data',
		arrayBuffer: new ArrayBuffer(0), // Replace with actual data
		expectedResult: {
			error: 'Expected error message',
		},
	},

	// Add more examples here...
];

/**
 * Helper function to create ArrayBuffer from hex string
 * Useful for converting hex data you might have
 */
export function createArrayBufferFromHex(hexString: string): ArrayBuffer {
	const bytes = new Uint8Array(hexString.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || []);
	return bytes.buffer;
}

/**
 * Helper function to create ArrayBuffer from base64 string
 * Useful for converting base64 data you might have
 */
export function createArrayBufferFromBase64(base64String: string): ArrayBuffer {
	const binaryString = atob(base64String);
	const bytes = new Uint8Array(binaryString.length);
	for (let i = 0; i < binaryString.length; i++) {
		bytes[i] = binaryString.charCodeAt(i);
	}
	return bytes.buffer;
}
